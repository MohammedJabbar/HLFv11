from fractions import Fraction as frac
from operator import add, neg
from threading import Thread
import re
import time

def modPoly(c, k):
    if k == 0:
        pass
    else:
        return [fracMod(x, k) for x in c]

def subPoly(c1, c2):
    [c1, c2] = resize(c1, c2)
    c2 = list(map(neg, c2))
    out = list(map(add, c1, c2))
    return trim(out)

def multPoly(c1, c2):
    order = (len(c1) - 1) + (len(c2) - 1)
    out = [0] * (order + 1)
    for i in range(len(c1)):
        for j in range(len(c2)):
            out[j + i] += c1[i] * c2[j]
    return trim(out)

def resize(c1, c2):
    if len(c1) > len(c2):
        c2 += [0] * (len(c1) - len(c2))
    if len(c1) < len(c2):
        c1 += [0] * (len(c2) - len(c1))
    return [c1, c2]

def trim(seq):
    if len(seq) == 0:
        return seq
    else:
        for i in range(len(seq) - 1, -1, -1):
            if seq[i] != 0:
                break
        return seq[0:i+1]

def extEuclidPoly(a, b):
    switch = False
    a = trim(a)
    b = trim(b)
    if len(a) >= len(b):
        a1, b1 = a, b
    else:
        a1, b1 = b, a
        switch = True
    Q, R = [], []
    while b1 != [0]:
        q, r = divPoly(a1, b1)
        Q.append(q)
        R.append(r)
        a1 = b1
        b1 = r
    S = [0] * (len(Q) + 2)
    T = [0] * (len(Q) + 2)
    S[0], S[1], T[0], T[1] = [1], [0], [0], [1]

    for x in range(2, len(S)):
        S[x] = subPoly(S[x - 2], multPoly(Q[x - 2], S[x - 1]))
        T[x] = subPoly(T[x - 2], multPoly(Q[x - 2], T[x - 1]))

    gcdVal = R[len(R) - 2]
    s_out = S[len(S) - 2]
    t_out = T[len(T) - 2]
    scaleFactor = gcdVal[len(gcdVal) - 1]
    gcdVal = [x / scaleFactor for x in gcdVal]
    s_out = [x / scaleFactor for x in s_out]
    t_out = [x / scaleFactor for x in t_out]

    if switch:
        return [gcdVal, t_out, s_out]
    else:
        return [gcdVal, s_out, t_out]

def divPoly(N, D):
    N, D = list(map(frac, trim(N))), list(map(frac, trim(D)))
    degN, degD = len(N) - 1, len(D) - 1
    if degN >= degD:
        q = [0] * (degN - degD + 1)
        while degN >= degD and N != [0]:
            d = list(D)
            d.insert(0, frac(0, 1))  # Multiply by x^degN-degD
            q[degN - degD] = N[degN] / d[len(d) - 1]
            d = [x * q[degN - degD] for x in d]
            N = subPoly(N, d)
            degN = len(N) - 1
        r = N
    else:
        q = [0]
        r = N
    return [trim(q), trim(r)]

def addPoly(c1, c2):
    [c1, c2] = resize(c1, c2)
    out = list(map(add, c1, c2))
    return trim(out)

def cenPoly(c, q):
    u = float(q) / float(2)
    l = -u
    c = modPoly(c, q)
    c = [mod(x, -q) if x > u else x for x in c]
    c = [mod(x, q) if x <= l else x for x in c]
    return c

def reModulo(num, div, modby):
    [_, remain] = divPoly(num, div)
    return modPoly(remain, modby)

def cn(a, b):
    x, y, u, v = 0, 1, 1, 0
    while a != 0:
        q, r = b // a, b % a
        m, n = x - u * q, y - v * q
        b, a, x, y, u, v = a, r, u, v, m, n
    return b, x, y

def egcd(a, b):
    b, x, y = cn(a, b)
    gcdVal = b
    return gcdVal, x, y

def modinv(a, m):
    gcdVal, x, y = egcd(a, m)
    if gcdVal != 1:
        return None
    else:
        return x % m

def fracMod(f, m):
    [tmp, t1, t2] = egcd(f.denominator, m)
    if tmp != 1:
        1 / 0
    else:
        out = modinv(f.denominator, m) * f.numerator % m
    return out

def NT(Np=167, pp=3, qp=128, fp=[-1, 1, 1, 0, -1, 0, 1, 0, 0, 1, -1], gp=[-1, 0, 1, 1, 0, 1, 0, 0, -1, 0, -1]):
    global h, D, f_p, f_q, randPol, N, p, q, f, g
    N = Np
    p = pp
    q = qp
    f = fp
    g = gp
    text = "None"
    ciphertext = "None"

    D = [0] * (N + 1)
    D[0] = -1
    D[N] = 1

    [gcd_f, s_f, t_f] = extEuclidPoly(f, D)

    f_p = modPoly(s_f, p)
    f_q = modPoly(s_f, q)

    x = multPoly(f_q, g)
    h = reModulo(x, D, q)

    return [h, N, p, q]

def Encrypted_mas(msg):
    e_tilda = addPoly(multPoly(multPoly([p], randPol), h), msg)
    e = reModulo(e_tilda, D, q)
    return e

def decrypt_mas(e):
    tmp = reModulo(multPoly(f, e), D, q)
    centered = cenPoly(tmp, q)
    m1 = multPoly(f_p, centered)
    tmp = reModulo(m1, D, p)
    return tmp

def decimalToBinary(n):
    return bin(n).replace("0b", "")

def splitData(x):
    junkers = re.compile('[[" \]]')
    result = junkers.sub('', x).split(',')
    s = []
    s2 = []
    for i in result:
        try:
            s2.append(int(i))
        except:
            pass
    if len(s2) == N:
        s.append(s2.copy())
        s2 = []
    if len(s2) < N and len(s2):
        s.append(s2.copy())
    return s

def listData2Msg(s):
    message = [''.join(str(e) for e in trim(decrypt_mas(s[i]))) for i in range(len(s))]
    listChar = ''
    for j in range(len(message)):
        for i in range(7, len(message[j]) + 1, 7):
            try:
                listChar += chr(int(''.join(message[0][i - 7:i]), 2))
            except:
                listChar += chr(int(''.join(message[0][(i - 7) * -1:]), 2))
    return listChar

def DEC(s):
    f = [decrypt_mas(i) for i in s]
    return f

def TestCode():
    for lk in zip([251, 401, 439, 487, 593, 743], [2048, 2048, 2048, 2048, 2048, 2048], [2008, 3033, 3501, 4383, 5193, 7690]):
        pa = NT(lk[0], 3, lk[1])
        for A in [lk[2]]:
            byte = int(A / 8)
            byte = int(byte / 3)
            my_str = "Z" * byte
            x, t = Bin2Poly(my_str)
            s = splitData(x)
            s = [decrypt_mas(i) for i in s]
            listChar = listData2Msg(s)
            n = 1
            for N in range(1, n + 1):
                time_start = time.process_time()
                for _ in range(N):
                    s = [decrypt_mas(i) for i in s]
                Time = time.process_time() - time_start
                print(f'Time: {Time}, cycles: {Time * 1400_000_000}, messages: {N}, bits: {len(my_str) * 8}, N: {pa[1]}, q: {pa[-1]}')

if __name__ == '__main__':
    TestCode()
